GNU Octave, version 4.4.0
Copyright (C) 2018 John W. Eaton and others.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.

Octave was configured for "x86_64-w64-mingw32".

Additional information about Octave is available at https://www.octave.org.

Please contribute if you find this software useful.
For more information, visit https://www.octave.org/get-involved.html

Read https://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

octave:1> a:3
error: 'a' undefined near line 1 column 1
octave:1> A = [1 2;3 4;5 6]
A =

   1   2
   3   4
   5   6

octave:2> a=3
a =  3
octave:3> disp(a)
 3
octave:4> disp(sprintf('2 decimal places : %0.2f',a))
2 decimal places : 3.00
octave:5> b = pi
b =  3.1416
octave:6> disp(sprintf('6 decimal places : %0.6f',b))
6 decimal places : 3.141593
octave:7> eye(3)
ans =

Diagonal Matrix

   1   0   0
   0   1   0
   0   0   1

octave:8> A
A =

   1   2
   3   4
   5   6

octave:9> size(A)
ans =

   3   2

octave:10> size(A,1)
ans =  3
octave:11> size(A,2)
ans =  2
octave:12> size(A,3)
ans =  1
octave:13> V = [1 2 3 4]
V =

   1   2   3   4

octave:14> length(V)
ans =  4
octave:15> length(A)
ans =  3
octave:16> length([1;2;3;4;5])
ans =  5
octave:17> length([1 2 3 4 5])
ans =  5
octave:18> pwd
ans = C:\Users\Nidhi
octave:19> load featuresX.dat
error: load: unable to find file featuresX.dat
octave:19> cd 'D:\Study\Coursera\MachineLearning_AdrewNg\Week2'
octave:20> pwd
ans = D:\Study\Coursera\MachineLearning_AdrewNg\Week2
octave:21> load featuresX.dat
octave:22> load priceY.dat
octave:23> who
Variables in the current scope:

A          V          a          ans        b          featuresX  priceY

octave:24> featuresX
featuresX =

   1200      2
   1389      2
   3367      4
   3423      3
   1324      1
   3424      4
   2342      2
   1210      2
   1349      2
   3327      4
   3426      3
   1328      1
   3421      4
   2343      2
   1589      2
   3467      4
   3623      3
   1724      1
   3924      4
   3342      2
   4210      2
   6349      4
   4327      4
   2426      3
   2328      1
   3481      4
   2393      2

octave:25> priceY
priceY =

   1202
   1392
   3374
   3433
   1341
   3444
   2322
   1202
   1392
   3374
   3463
   1381
   3424
   2342
   1582
   3464
   3623
   1721
   3924
   3342
   4212
   6344
   4324
   2423
   2321
   3484
   2392

octave:26> length(priceY)
ans =  27
octave:27> whos
Variables in the current scope:

   Attr Name           Size                     Bytes  Class
   ==== ====           ====                     =====  =====
        A              3x2                         48  double
        V              1x4                         32  double
        a              1x1                          8  double
        ans            1x1                          8  double
        b              1x1                          8  double
        featuresX     27x2                        432  double
        priceY        27x1                        216  double

Total is 94 elements using 752 bytes

octave:28> clear featuresX
octave:29> whos
Variables in the current scope:

   Attr Name        Size                     Bytes  Class
   ==== ====        ====                     =====  =====
        A           3x2                         48  double
        V           1x4                         32  double
        a           1x1                          8  double
        ans         1x1                          8  double
        b           1x1                          8  double
        priceY     27x1                        216  double

Total is 40 elements using 320 bytes

octave:30> v=priceY(1:10)
v =

   1202
   1392
   3374
   3433
   1341
   3444
   2322
   1202
   1392
   3374

octave:31> save hello.mat v;
octave:32> save hello.mat v -ascii;
octave:33> save hello.txt v -ascii;
octave:34> A
A =

   1   2
   3   4
   5   6

octave:35> A(#,2)
> A(#,2)
>
>
>
> A(3,2)
> exit
parse error:

  syntax error

>>> exit
       ^

octave:35> A(3,2)
ans =  6
octave:36> A(:,2)
ans =

   2
   4
   6

octave:37> A(3,:)
ans =

   5   6

octave:38> A([1,3],:)
ans =

   1   2
   5   6

octave:39> A[:,2] = [10; 11; 12]
parse error:

  syntax error

>>> A[:,2] = [10; 11; 12]
     ^

octave:39> A(:,2) = [10; 11; 12]
A =

    1   10
    3   11
    5   12

octave:40> A[A,[100; 101; 102]]
parse error:

  syntax error

>>> A[A,[100; 101; 102]]
     ^

octave:40> A=[A,[100; 101; 102]]
A =

     1    10   100
     3    11   101
     5    12   102

octave:41> size(A)
ans =

   3   3

octave:42> A(:)
ans =

     1
     3
     5
    10
    11
    12
   100
   101
   102

octave:43> A
A =

     1    10   100
     3    11   101
     5    12   102

octave:44> B = [1001 1002; 1003 1004; 1005 1006]
B =

   1001   1002
   1003   1004
   1005   1006

octave:45> C=[A B]
C =

      1     10    100   1001   1002
      3     11    101   1003   1004
      5     12    102   1005   1006

octave:46> D=[9 99; 999 999]
D =

     9    99
   999   999

octave:47> C=[A B c]
error: 'c' undefined near line 1 column 8
octave:47> C=[A B D]
error: horizontal dimensions mismatch (3x5 vs 2x2)
octave:47> C=[A; B]
error: vertical dimensions mismatch (3x3 vs 3x2)
octave:47> C
C =

      1     10    100   1001   1002
      3     11    101   1003   1004
      5     12    102   1005   1006

octave:48> A
A =

     1    10   100
     3    11   101
     5    12   102

octave:49> B
B =

   1001   1002
   1003   1004
   1005   1006

octave:50> D=[-1 -2; -3 -4, -5 -6]
error: vertical dimensions mismatch (1x2 vs 1x4)
octave:50> clear D
octave:51> D=[-1 -2; -3 -4, -5 -6]
error: vertical dimensions mismatch (1x2 vs 1x4)
octave:51> D=[-1 -2; -3 -4; -5 -6]
D =

  -1  -2
  -3  -4
  -5  -6

octave:52> E=[B;D]
E =

   1001   1002
   1003   1004
   1005   1006
     -1     -2
     -3     -4
     -5     -6

octave:53> A=[1 2; 3 4; 5 6]
A =

   1   2
   3   4
   5   6

octave:54> B=[11 12; 13 14; 15 16]
B =

   11   12
   13   14
   15   16

octave:55> A*B
error: operator *: nonconformant arguments (op1 is 3x2, op2 is 3x2)
octave:55> A.B
error: matrix cannot be indexed with .
octave:55> B=[11 12 11; 13 14 13; 15 16 15;]
B =

   11   12   11
   13   14   13
   15   16   15

octave:56> A*B
error: operator *: nonconformant arguments (op1 is 3x2, op2 is 3x3)
octave:56> B=[11 12; 13 14]
B =

   11   12
   13   14

octave:57> A*B
ans =

    37    40
    85    92
   133   144

octave:58> A.*B
error: product: nonconformant arguments (op1 is 3x2, op2 is 2x2)
octave:58> B=[11 12 11; 13 14 13; 15 16 15;]
B =

   11   12   11
   13   14   13
   15   16   15

octave:59> A.*B
error: product: nonconformant arguments (op1 is 3x2, op2 is 3x3)
octave:59> B=[11 12 11; 13 14 13]
B =

   11   12   11
   13   14   13

octave:60> A.*B
error: product: nonconformant arguments (op1 is 3x2, op2 is 2x3)
octave:60> V=[1;2;3]
V =

   1
   2
   3

octave:61> 1./V
ans =

   1.00000
   0.50000
   0.33333

octave:62> 1./A
ans =

   1.00000   0.50000
   0.33333   0.25000
   0.20000   0.16667

octave:63> 1/V
ans =

   0.071429   0.142857   0.214286

octave:64> exp(V)
ans =

    2.7183
    7.3891
   20.0855

octave:65> abs(V)
ans =

   1
   2
   3

octave:66> abs([-1;2;-3])
ans =

   1
   2
   3

octave:67> -V
ans =

  -1
  -2
  -3

octave:68> ones(1)
ans =  1
octave:69> ones(4)
ans =

   1   1   1   1
   1   1   1   1
   1   1   1   1
   1   1   1   1

octave:70> V + ones(length(V))
ans =

   2   2   2
   3   3   3
   4   4   4

octave:71> ones(4,1)
ans =

   1
   1
   1
   1

octave:72> V + ones(length(V),1)
ans =

   2
   3
   4

octave:73> V+1
ans =

   2
   3
   4

octave:74> V.+1
ans =

   2
   3
   4

octave:75> A'
ans =

   1   3   5
   2   4   6

octave:76> (A')'
ans =

   1   2
   3   4
   5   6

octave:77> A-1
ans =

   0   1
   2   3
   4   5

octave:78> max(A)
ans =

   5   6

octave:79> [val, ind] = max(A)
val =

   5   6

ind =

   3   3

octave:80> max(V)
ans =  3
octave:81> [val, ind] = max(V)
val =  3
ind =  3
octave:82> A<3
ans =

  1  1
  0  0
  0  0

octave:83> find(A<3)
ans =

   1
   4

octave:84> find(A<5)
ans =

   1
   2
   4
   5

octave:85> magic(4)
ans =

   16    2    3   13
    5   11   10    8
    9    7    6   12
    4   14   15    1

octave:86> [r,c] = find(A<5)
r =

   1
   2
   1
   2

c =

   1
   1
   2
   2

octave:87> help find
'find' is a built-in function from the file libinterp/corefcn/find.cc

 -- IDX = find (X)
 -- IDX = find (X, N)
 -- IDX = find (X, N, DIRECTION)
 -- [i, j] = find (...)
 -- [i, j, v] = find (...)
     Return a vector of indices of nonzero elements of a matrix, as a
     row if X is a row vector or as a column otherwise.

     To obtain a single index for each matrix element, Octave pretends
     that the columns of a matrix form one long vector (like Fortran
     arrays are stored).  For example:

          find (eye (2))
            => [ 1; 4 ]

     If two inputs are given, N indicates the maximum number of elements
     to find from the beginning of the matrix or vector.

     If three inputs are given, DIRECTION should be one of "first" or
     "last", requesting only the first or last N indices, respectively.
     However, the indices are always returned in ascending order.

     If two outputs are requested, 'find' returns the row and column
     indices of nonzero elements of a matrix.  For example:

          [i, j] = find (2 * eye (2))
              => i = [ 1; 2 ]
              => j = [ 1; 2 ]

     If three outputs are requested, 'find' also returns a vector
     containing the nonzero values.  For example:

          [i, j, v] = find (3 * eye (2))
                 => i = [ 1; 2 ]
                 => j = [ 1; 2 ]
                 => v = [ 3; 3 ]

     Note that this function is particularly useful for sparse matrices,
     as it extracts the nonzero elements as vectors, which can then be
     used to create the original matrix.  For example:

          sz = size (a);
          [i, j, v] = find (a);
          b = sparse (i, j, v, sz(1), sz(2));

     See also: nonzeros.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
octave:88>
octave:88>
octave:88> sum(V)
ans =  6
octave:89> prod(V)
ans =  6
octave:90> floor(V)
ans =

   1
   2
   3

octave:91> R1 = rand(3)
R1 =

   0.882500   0.421101   0.283889
   0.806763   0.929779   0.695807
   0.584055   0.027278   0.139082

octave:92> R2 = rand(3)
R2 =

   0.132991   0.817477   0.081271
   0.970156   0.619864   0.047586
   0.032503   0.655951   0.765084

octave:93> max(R1,R2)
ans =

   0.88250   0.81748   0.28389
   0.97016   0.92978   0.69581
   0.58406   0.65595   0.76508

octave:94> max(R1,[],1) % takes column wise maximum
ans =

   0.88250   0.92978   0.69581

octave:95> max(R1,[],2) % takes column wise maximum
ans =

   0.88250
   0.92978
   0.58406

octave:96> max(R1,[],3) % takes column wise maximum
ans =

   0.882500   0.421101   0.283889
   0.806763   0.929779   0.695807
   0.584055   0.027278   0.139082

octave:97> max(R1,[],4) % takes column wise maximum
ans =

   0.882500   0.421101   0.283889
   0.806763   0.929779   0.695807
   0.584055   0.027278   0.139082

octave:98> max(R1,[],2) % takes row wise maximum
ans =

   0.88250
   0.92978
   0.58406

octave:99> max(max(R1))
ans =  0.92978
octave:100> R1(:)
ans =

   0.882500
   0.806763
   0.584055
   0.421101
   0.929779
   0.027278
   0.283889
   0.695807
   0.139082

octave:101> max(r!)
parse error:

  syntax error

>>> max(r!)
         ^

octave:101> max(R1)
ans =

   0.88250   0.92978   0.69581

octave:102> max(A(:))
ans =  6
octave:103> max(R1(:))
ans =  0.92978
octave:104> A=magic(9)
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:105> sum(A,1)
ans =

   369   369   369   369   369   369   369   369   369

octave:106> sum(A,2)
ans =

   369
   369
   369
   369
   369
   369
   369
   369
   369

octave:107> eye(9)
ans =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

octave:108> A.*eye(9)
ans =

   47    0    0    0    0    0    0    0    0
    0   68    0    0    0    0    0    0    0
    0    0    8    0    0    0    0    0    0
    0    0    0   20    0    0    0    0    0
    0    0    0    0   41    0    0    0    0
    0    0    0    0    0   62    0    0    0
    0    0    0    0    0    0   74    0    0
    0    0    0    0    0    0    0   14    0
    0    0    0    0    0    0    0    0   35

octave:109> sum(sum(A.*eye(9)))
ans =  369
octave:110> (eye(9))'
ans =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

octave:111> (eye(9))^-1
ans =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

octave:112> flipup(eye(9))
error: 'flipup' undefined near line 1 column 1
octave:112> sum(sum(A.*flipup(eye(9))))
error: 'flipup' undefined near line 1 column 12
octave:112> flipud(eye(9))
ans =

Permutation Matrix

   0   0   0   0   0   0   0   0   1
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   1   0   0   0   0   0   0   0   0

octave:113> sum(sum(A.*flipud(eye(9))))
ans =  369
octave:114> A=magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:115> pinv(A)
ans =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

octave:116> pinv(A) * A
ans =

  1.0000e+000  2.0817e-016  -3.1641e-015
  -6.1062e-015  1.0000e+000  6.2450e-015
  3.0531e-015  4.1633e-017  1.0000e+000

octave:117>